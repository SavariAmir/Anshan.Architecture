using System;
using System.Net;
using System.Threading.Tasks;
using Advertisement.Application.Contracts.{{ Model.DomainName.InPlural }};
using Anshan.Test.Faker;
using FluentAssertions;
using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http;
{% if Model.HasShared %}
using {{ Model.SolutionName }}.Application.Contracts.Shared;
{% endif %}

namespace {{ Model.SolutionName }}.Specs.{{ Model.DomainName.InPlural }}
{
    public partial class {{ Model.DomainName.Value }}Tests
    {
        private async Task UserWantsTo{{ Model.UseCase.Title.Value }}{{ Model.DomainName.Value }}()
        {
            var createCommand = TestFaker.Build<Create{{ Model.DomainName.Value }}Command>();
            
            var httpResponseMessage = await _task.Create{{ Model.DomainName.Value }}Async(createCommand);
            
            var id = await httpResponseMessage.Content.ReadAsStringAsync();
            
            _contextData.Set("{{ Model.UseCase.Title.Value }}_Id", id);
            _contextData.Set("{{ Model.UseCase.Title.Value }}{{ Model.DomainName.Value }}Command", TestFaker.Build<{{ Model.UseCase.Title.Value }}{{ Model.DomainName.Value }}Command>());
        }

        private async Task User{{ Model.UseCase.Title.Value }}{{ Model.DomainName.Value }}()
        {
            var id = _contextData.Get<string>("{{ Model.UseCase.Title.Value }}_Id");
            var command = _contextData.Get<{{ Model.UseCase.Title.Value }}{{ Model.DomainName.Value }}Command>("{{ Model.UseCase.Title.Value }}{{ Model.DomainName.Value }}Command");

            var httpResponseMessage = await _task.{{ Model.UseCase.Title.Value }}Async(id, command);

            httpResponseMessage.StatusCode.Should().Be(HttpStatusCode.OK);
        }

        private async Task {{ Model.UseCase.Title.Value }}{{ Model.DomainName.Value }}ShouldBeSuccessful()
        {
            var id = _contextData.Get<string>("{{ Model.UseCase.Title.Value }}_Id");

            var domainReadModel = await _task.Get{{ Model.DomainName.Value }}Async(id);

            //TODO: assert
            throw new NotImplementedException();

            var deleteResponse = await _task.Delete{{ Model.DomainName.Value }}Async(id);

            deleteResponse.StatusCode.Should().Be(HttpStatusCode.OK);
        }
    }
}